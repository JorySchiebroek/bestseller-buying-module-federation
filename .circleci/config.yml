# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
version: 2.1

commands:
  set-env-var:
    description: Set env variable for a package
    parameters:
      package_url:
        default: ""
        type: string
      env_var_name:
        default: ""
        type: string
    steps:
      - run:
          name: "Check for changes in <<parameters.package_url>>"
          # "Since every run step is a new shell, environment variables are not shared across steps.
          # If you need an environment variable to be accessible in more than one step, export the value using BASH_ENV."
          # See: https://circleci.com/docs/set-environment-variable/#set-an-environment-variable-in-a-step
          command: |
            if [[ $(git diff --name-only HEAD^ HEAD packages/<<parameters.package_url>>) ]]; then
              echo "Changes detected in <<parameters.package_url>>"
              echo "export <<parameters.env_var_name>>=true" >> $BASH_ENV
            else
              echo "No changes detected in <<parameters.package_url>>"
              echo "export <<parameters.env_var_name>>=false" >> $BASH_ENV
            fi
  import-env-vars:
    description: Import env variables
    steps:
      - attach_workspace:
          at: .
      # - checkout
      - run:
          name: Import bash file
          command: |
            cat bash.env >> $BASH_ENV

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  check-for-changes:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - checkout
      - set-env-var:
          package_url: collections-page
          env_var_name: COLLECTIONS_PAGE_CHANGED
      - set-env-var:
          package_url: styles-page
          env_var_name: STYLES_PAGE_CHANGED
      - run:
          name: Results
          command: |
            source $BASH_ENV
            echo $COLLECTIONS_PAGE_CHANGED for collections-page
            echo $STYLES_PAGE_CHANGED for styles-page
      - run: |
          cp $BASH_ENV bash.env
      - persist_to_workspace:
          root: .
          paths:
            - bash.env
  collections-page:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - import-env-vars
      # Install dependencies and build the "settings_page" package
      - run:
          name: Lint "collections-page"
          command: |
            source $BASH_ENV
            if [ "$COLLECTIONS_PAGE_CHANGED" == "true" ]; then
              cd packages/collections-page
              echo "Doing the fake lint"
            else
              echo "No changes in packages/collections-page, skipping lint"
            fi
      - run:
          name: Test "collections-page"
          command: |
            source $BASH_ENV
            if [ "$COLLECTIONS_PAGE_CHANGED" == "true" ]; then
              cd packages/collections-page
              echo "Doing the fake test"
            else
              echo "No changes in packages/collections-page, skipping test"
            fi
      - run:
          name: Build "collections-page"
          command: |
            source $BASH_ENV
            if [ "$COLLECTIONS_PAGE_CHANGED" == "true" ]; then
              cd packages/collections-page
              npm install
              npm run build
            else
              echo "No changes in packages/collections-page, skipping build"
            fi
  styles-page:
    # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/configuration-reference/#executor-job
    docker:
      - image: cimg/base:stable
    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      - import-env-vars
      # Install dependencies and build the "settings_page" package
      - run:
          name: Lint "styles-page"
          command: |
            source $BASH_ENV
            if [ "$STYLES_PAGE_CHANGED" == "true" ]; then
              cd packages/styles-page
              echo "Doing the fake lint"
            else
              echo "No changes in packages/styles-page, skipping lint"
            fi
      - run:
          name: Test "styles-page"
          command: |
            source $BASH_ENV
            if [ "$STYLES_PAGE_CHANGED" == "true" ]; then
              cd packages/styles-page
              echo "Doing the fake test"
            else
              echo "No changes in packages/styles-page, skipping test"
            fi
      - run:
          name: Build "styles-page"
          command: |
            source $BASH_ENV
            if [ "$STYLES_PAGE_CHANGED" == "true" ]; then
              cd packages/styles-page
              npm install
              npm run build
            else
              echo "No changes in packages/styles-page, skipping build"
            fi


# Orchestrate jobs using workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  # We can only have ONE workflow if we want to benefit from sharing env variables
  deploy-micro-frontends:
    jobs:
      # Check each micro-frontend for changes, and set our env variables accordingly
      - check-for-changes
      # Then we go through each changed micro-frontends
      - collections-page:
          requires:
            - check-for-changes
      - styles-page:
          requires:
            - check-for-changes
